

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import asyncio
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("uniffi_bindings_p2p")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 29
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_uniffi_bindings_p2p_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_add_vote() != 23526:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_all_content() != 1217:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_raw_message() != 43565:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_set_listener() != 41029:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_start() != 19920:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_get_reputation() != 48265:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_get_reputations() != 9185:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_get_status_vote() != 42272:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_register_topic() != 2977:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_remote_new_topic() != 1486:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_start() != 8283:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_validate_content() != 31051:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_func_voters() != 25805:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_uniffi_bindings_p2p_checksum_method_eventlistener_on_event() != 40838:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UNIFFI_CALLBACK_INTERFACE_EVENT_LISTENER_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
class _UniffiVTableCallbackInterfaceEventListener(ctypes.Structure):
    _fields_ = [
        ("on_event", _UNIFFI_CALLBACK_INTERFACE_EVENT_LISTENER_METHOD0),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_clone_eventlistener.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_clone_eventlistener.restype = ctypes.c_void_p
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_free_eventlistener.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_free_eventlistener.restype = None
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_init_callback_vtable_eventlistener.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceEventListener),
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_init_callback_vtable_eventlistener.restype = None
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_method_eventlistener_on_event.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_method_eventlistener_on_event.restype = _UniffiRustBuffer
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_add_vote.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_add_vote.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_all_content.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_all_content.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_dummy_raw_message.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_dummy_raw_message.restype = None
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_dummy_set_listener.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_dummy_set_listener.restype = None
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_dummy_start.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_dummy_start.restype = None
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_get_reputation.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_get_reputation.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_get_reputations.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_get_reputations.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_get_status_vote.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_get_status_vote.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_register_topic.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_register_topic.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_remote_new_topic.argtypes = (
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_remote_new_topic.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_start.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_start.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_validate_content.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_validate_content.restype = ctypes.c_uint64
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_voters.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_voters.restype = ctypes.c_uint64
_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_free.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_u8.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_u8.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_i8.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_i8.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_u16.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_u16.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_i16.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_i16.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_u32.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_u32.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_i32.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_i32.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_u64.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_u64.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_i64.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_i64.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_f32.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_f32.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_f64.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_f64.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_pointer.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_void.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_cancel_void.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_void.restype = None
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_void.restype = None
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_add_vote.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_add_vote.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_all_content.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_all_content.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_raw_message.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_raw_message.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_set_listener.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_set_listener.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_start.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_get_reputation.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_get_reputation.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_get_reputations.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_get_reputations.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_get_status_vote.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_get_status_vote.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_register_topic.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_register_topic.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_remote_new_topic.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_remote_new_topic.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_start.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_validate_content.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_validate_content.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_voters.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_func_voters.restype = ctypes.c_uint16
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_method_eventlistener_on_event.argtypes = (
)
_UniffiLib.uniffi_uniffi_bindings_p2p_checksum_method_eventlistener_on_event.restype = ctypes.c_uint16
_UniffiLib.ffi_uniffi_bindings_p2p_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_uniffi_bindings_p2p_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.
# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
_UNIFFI_IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

class _UniffiConverterFloat(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_float()

    @staticmethod
    def write(value, buf):
        buf.write_float(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

# The Timestamp type.
Timestamp = datetime.datetime

# There is a loss of precision when converting from Rust timestamps,
# which are accurate to the nanosecond,
# to Python datetimes, which have a variable precision due to the use of float as representation.
class _UniffiConverterTimestamp(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        seconds = buf.read_i64()
        microseconds = buf.read_u32() / 1000
        # Use fromtimestamp(0) then add the seconds using a timedelta.  This
        # ensures that we get OverflowError rather than ValueError when
        # seconds is too large.
        if seconds >= 0:
            return datetime.datetime.fromtimestamp(0, tz=datetime.timezone.utc) + datetime.timedelta(seconds=seconds, microseconds=microseconds)
        else:
            return datetime.datetime.fromtimestamp(0, tz=datetime.timezone.utc) - datetime.timedelta(seconds=-seconds, microseconds=microseconds)

    @staticmethod
    def check_lower(value):
        pass

    @staticmethod
    def write(value, buf):
        if value >= datetime.datetime.fromtimestamp(0, datetime.timezone.utc):
            sign = 1
            delta = value - datetime.datetime.fromtimestamp(0, datetime.timezone.utc)
        else:
            sign = -1
            delta = datetime.datetime.fromtimestamp(0, datetime.timezone.utc) - value

        seconds = delta.seconds + delta.days * 24 * 3600
        nanoseconds = delta.microseconds * 1000
        buf.write_i64(sign * seconds)
        buf.write_u32(nanoseconds)




class ConnectionData:
    server_peer_id: "str"
    server_address: "str"
    client_peer_id: "str"
    def __init__(self, *, server_peer_id: "str", server_address: "str", client_peer_id: "str"):
        self.server_peer_id = server_peer_id
        self.server_address = server_address
        self.client_peer_id = client_peer_id

    def __str__(self):
        return "ConnectionData(server_peer_id={}, server_address={}, client_peer_id={})".format(self.server_peer_id, self.server_address, self.client_peer_id)

    def __eq__(self, other):
        if self.server_peer_id != other.server_peer_id:
            return False
        if self.server_address != other.server_address:
            return False
        if self.client_peer_id != other.client_peer_id:
            return False
        return True

class _UniffiConverterTypeConnectionData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ConnectionData(
            server_peer_id=_UniffiConverterString.read(buf),
            server_address=_UniffiConverterString.read(buf),
            client_peer_id=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.server_peer_id)
        _UniffiConverterString.check_lower(value.server_address)
        _UniffiConverterString.check_lower(value.client_peer_id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.server_peer_id, buf)
        _UniffiConverterString.write(value.server_address, buf)
        _UniffiConverterString.write(value.client_peer_id, buf)


class DataContent:
    id_votation: "str"
    content: "str"
    approved: "StateContent"
    def __init__(self, *, id_votation: "str", content: "str", approved: "StateContent"):
        self.id_votation = id_votation
        self.content = content
        self.approved = approved

    def __str__(self):
        return "DataContent(id_votation={}, content={}, approved={})".format(self.id_votation, self.content, self.approved)

    def __eq__(self, other):
        if self.id_votation != other.id_votation:
            return False
        if self.content != other.content:
            return False
        if self.approved != other.approved:
            return False
        return True

class _UniffiConverterTypeDataContent(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DataContent(
            id_votation=_UniffiConverterString.read(buf),
            content=_UniffiConverterString.read(buf),
            approved=_UniffiConverterTypeStateContent.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id_votation)
        _UniffiConverterString.check_lower(value.content)
        _UniffiConverterTypeStateContent.check_lower(value.approved)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id_votation, buf)
        _UniffiConverterString.write(value.content, buf)
        _UniffiConverterTypeStateContent.write(value.approved, buf)


class Event:
    topic: "str"
    message: "str"
    def __init__(self, *, topic: "str", message: "str"):
        self.topic = topic
        self.message = message

    def __str__(self):
        return "Event(topic={}, message={})".format(self.topic, self.message)

    def __eq__(self, other):
        if self.topic != other.topic:
            return False
        if self.message != other.message:
            return False
        return True

class _UniffiConverterTypeEvent(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Event(
            topic=_UniffiConverterString.read(buf),
            message=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.topic)
        _UniffiConverterString.check_lower(value.message)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.topic, buf)
        _UniffiConverterString.write(value.message, buf)


class Reputation:
    name: "str"
    repu: "float"
    def __init__(self, *, name: "str", repu: "float"):
        self.name = name
        self.repu = repu

    def __str__(self):
        return "Reputation(name={}, repu={})".format(self.name, self.repu)

    def __eq__(self, other):
        if self.name != other.name:
            return False
        if self.repu != other.repu:
            return False
        return True

class _UniffiConverterTypeReputation(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Reputation(
            name=_UniffiConverterString.read(buf),
            repu=_UniffiConverterFloat.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.name)
        _UniffiConverterFloat.check_lower(value.repu)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterFloat.write(value.repu, buf)


class Votation:
    id_votation: "str"
    timestam: "Timestamp"
    content: "str"
    status: "str"
    leader_id: "str"
    my_role: "str"
    votes_id: "typing.List[VoteId]"
    def __init__(self, *, id_votation: "str", timestam: "Timestamp", content: "str", status: "str", leader_id: "str", my_role: "str", votes_id: "typing.List[VoteId]"):
        self.id_votation = id_votation
        self.timestam = timestam
        self.content = content
        self.status = status
        self.leader_id = leader_id
        self.my_role = my_role
        self.votes_id = votes_id

    def __str__(self):
        return "Votation(id_votation={}, timestam={}, content={}, status={}, leader_id={}, my_role={}, votes_id={})".format(self.id_votation, self.timestam, self.content, self.status, self.leader_id, self.my_role, self.votes_id)

    def __eq__(self, other):
        if self.id_votation != other.id_votation:
            return False
        if self.timestam != other.timestam:
            return False
        if self.content != other.content:
            return False
        if self.status != other.status:
            return False
        if self.leader_id != other.leader_id:
            return False
        if self.my_role != other.my_role:
            return False
        if self.votes_id != other.votes_id:
            return False
        return True

class _UniffiConverterTypeVotation(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Votation(
            id_votation=_UniffiConverterString.read(buf),
            timestam=_UniffiConverterTimestamp.read(buf),
            content=_UniffiConverterString.read(buf),
            status=_UniffiConverterString.read(buf),
            leader_id=_UniffiConverterString.read(buf),
            my_role=_UniffiConverterString.read(buf),
            votes_id=_UniffiConverterSequenceTypeVoteId.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id_votation)
        _UniffiConverterTimestamp.check_lower(value.timestam)
        _UniffiConverterString.check_lower(value.content)
        _UniffiConverterString.check_lower(value.status)
        _UniffiConverterString.check_lower(value.leader_id)
        _UniffiConverterString.check_lower(value.my_role)
        _UniffiConverterSequenceTypeVoteId.check_lower(value.votes_id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id_votation, buf)
        _UniffiConverterTimestamp.write(value.timestam, buf)
        _UniffiConverterString.write(value.content, buf)
        _UniffiConverterString.write(value.status, buf)
        _UniffiConverterString.write(value.leader_id, buf)
        _UniffiConverterString.write(value.my_role, buf)
        _UniffiConverterSequenceTypeVoteId.write(value.votes_id, buf)


class Vote:
    good: "bool"
    def __init__(self, *, good: "bool"):
        self.good = good

    def __str__(self):
        return "Vote(good={})".format(self.good)

    def __eq__(self, other):
        if self.good != other.good:
            return False
        return True

class _UniffiConverterTypeVote(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Vote(
            good=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterBool.check_lower(value.good)

    @staticmethod
    def write(value, buf):
        _UniffiConverterBool.write(value.good, buf)


class VoteId:
    key: "str"
    value: "float"
    def __init__(self, *, key: "str", value: "float"):
        self.key = key
        self.value = value

    def __str__(self):
        return "VoteId(key={}, value={})".format(self.key, self.value)

    def __eq__(self, other):
        if self.key != other.key:
            return False
        if self.value != other.value:
            return False
        return True

class _UniffiConverterTypeVoteId(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return VoteId(
            key=_UniffiConverterString.read(buf),
            value=_UniffiConverterFloat.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.key)
        _UniffiConverterFloat.check_lower(value.value)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.key, buf)
        _UniffiConverterFloat.write(value.value, buf)


# ApiError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class ApiError(Exception):
    pass

_UniffiTempApiError = ApiError

class ApiError:  # type: ignore
    class ConnectionError(_UniffiTempApiError):

        def __repr__(self):
            return "ApiError.ConnectionError({})".format(repr(str(self)))
    _UniffiTempApiError.ConnectionError = ConnectionError # type: ignore
    class ConcurrencyError(_UniffiTempApiError):

        def __repr__(self):
            return "ApiError.ConcurrencyError({})".format(repr(str(self)))
    _UniffiTempApiError.ConcurrencyError = ConcurrencyError # type: ignore
    class RuntimeError(_UniffiTempApiError):

        def __repr__(self):
            return "ApiError.RuntimeError({})".format(repr(str(self)))
    _UniffiTempApiError.RuntimeError = RuntimeError # type: ignore

ApiError = _UniffiTempApiError # type: ignore
del _UniffiTempApiError


class _UniffiConverterTypeApiError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ApiError.ConnectionError(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return ApiError.ConcurrencyError(
                _UniffiConverterString.read(buf),
            )
        if variant == 3:
            return ApiError.RuntimeError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, ApiError.ConnectionError):
            return
        if isinstance(value, ApiError.ConcurrencyError):
            return
        if isinstance(value, ApiError.RuntimeError):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, ApiError.ConnectionError):
            buf.write_i32(1)
        if isinstance(value, ApiError.ConcurrencyError):
            buf.write_i32(2)
        if isinstance(value, ApiError.RuntimeError):
            buf.write_i32(3)





class StateContent(enum.Enum):
    APPROVED = 0
    
    REJECTED = 1
    


class _UniffiConverterTypeStateContent(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return StateContent.APPROVED
        if variant == 2:
            return StateContent.REJECTED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == StateContent.APPROVED:
            return
        if value == StateContent.REJECTED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == StateContent.APPROVED:
            buf.write_i32(1)
        if value == StateContent.REJECTED:
            buf.write_i32(2)





class _UniffiConverterOptionalTypeVotation(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeVotation.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeVotation.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeVotation.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeDataContent(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeDataContent.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeDataContent.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeDataContent.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeReputation(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeReputation.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeReputation.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeReputation.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeVoteId(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeVoteId.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeVoteId.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeVoteId.read(buf) for i in range(count)
        ]

# objects.
class EventListenerProtocol(typing.Protocol):
    def on_event(self, event: "Event"):
        raise NotImplementedError
# EventListener is a foreign trait so treated like a callback interface, where the
# primary use-case is the trait being implemented locally.
# It is a base-class local implementations might subclass.


class EventListener():
    def on_event(self, event: "Event"):
        raise NotImplementedError
# `EventListenerImpl` is the implementation for a Rust implemented version.
class EventListenerImpl():
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_uniffi_bindings_p2p_fn_free_eventlistener, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_uniffi_bindings_p2p_fn_clone_eventlistener, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def on_event(self, event: "Event") -> "str":
        _UniffiConverterTypeEvent.check_lower(event)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_uniffi_bindings_p2p_fn_method_eventlistener_on_event,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event))
        )





# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplEventListener:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_EVENT_LISTENER_METHOD0
    def on_event(
            uniffi_handle,
            event,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeEventListener._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEvent.lift(event), )
            method = uniffi_obj.on_event
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterString.lower(v)
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeEventListener._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceEventListener(
        on_event,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_uniffi_bindings_p2p_fn_init_callback_vtable_eventlistener(ctypes.byref(_uniffi_vtable))



class _UniffiConverterTypeEventListener:
    _handle_map = _UniffiHandleMap()

    @staticmethod
    def lift(value: int):
        return EventListenerImpl._make_instance_(value)

    @staticmethod
    def check_lower(value: EventListener):
        pass

    @staticmethod
    def lower(value: EventListenerProtocol):
        return _UniffiConverterTypeEventListener._handle_map.insert(value)

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: EventListenerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))

# Async support# RustFuturePoll values
_UNIFFI_RUST_FUTURE_POLL_READY = 0
_UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1

# Stores futures for _uniffi_continuation_callback
_UniffiContinuationHandleMap = _UniffiHandleMap()

_UNIFFI_GLOBAL_EVENT_LOOP = None

"""
Set the event loop to use for async functions

This is needed if some async functions run outside of the eventloop, for example:
    - A non-eventloop thread is spawned, maybe from `EventLoop.run_in_executor` or maybe from the
      Rust code spawning its own thread.
    - The Rust code calls an async callback method from a sync callback function, using something
      like `pollster` to block on the async call.

In this case, we need an event loop to run the Python async function, but there's no eventloop set
for the thread.  Use `uniffi_set_event_loop` to force an eventloop to be used in this case.
"""
def uniffi_set_event_loop(eventloop: asyncio.BaseEventLoop):
    global _UNIFFI_GLOBAL_EVENT_LOOP
    _UNIFFI_GLOBAL_EVENT_LOOP = eventloop

def _uniffi_get_event_loop():
    if _UNIFFI_GLOBAL_EVENT_LOOP is not None:
        return _UNIFFI_GLOBAL_EVENT_LOOP
    else:
        return asyncio.get_running_loop()

# Continuation callback for async functions
# lift the return value or error and resolve the future, causing the async function to resume.
@_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK
def _uniffi_continuation_callback(future_ptr, poll_code):
    (eventloop, future) = _UniffiContinuationHandleMap.remove(future_ptr)
    eventloop.call_soon_threadsafe(_uniffi_set_future_result, future, poll_code)

def _uniffi_set_future_result(future, poll_code):
    if not future.cancelled():
        future.set_result(poll_code)

async def _uniffi_rust_call_async(rust_future, ffi_poll, ffi_complete, ffi_free, lift_func, error_ffi_converter):
    try:
        eventloop = _uniffi_get_event_loop()

        # Loop and poll until we see a _UNIFFI_RUST_FUTURE_POLL_READY value
        while True:
            future = eventloop.create_future()
            ffi_poll(
                rust_future,
                _uniffi_continuation_callback,
                _UniffiContinuationHandleMap.insert((eventloop, future)),
            )
            poll_code = await future
            if poll_code == _UNIFFI_RUST_FUTURE_POLL_READY:
                break

        return lift_func(
            _uniffi_rust_call_with_error(error_ffi_converter, ffi_complete, rust_future)
        )
    finally:
        ffi_free(rust_future)
async def add_vote(topic: "str",message: "str",vote: "Vote") -> None:

    _UniffiConverterString.check_lower(topic)
    
    _UniffiConverterString.check_lower(message)
    
    _UniffiConverterTypeVote.check_lower(vote)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_add_vote(
        _UniffiConverterString.lower(topic),
        _UniffiConverterString.lower(message),
        _UniffiConverterTypeVote.lower(vote)),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_void,
        # lift function
        lambda val: None,
        
        
    # Error FFI converter
_UniffiConverterTypeApiError,

    )
async def all_content() -> "typing.List[DataContent]":

    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_all_content(),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterSequenceTypeDataContent.lift,
        
    # Error FFI converter
_UniffiConverterTypeApiError,

    )

def dummy_raw_message(topic: "str",message: "str") -> None:
    _UniffiConverterString.check_lower(topic)
    
    _UniffiConverterString.check_lower(message)
    
    _uniffi_rust_call(_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_dummy_raw_message,
        _UniffiConverterString.lower(topic),
        _UniffiConverterString.lower(message))


def dummy_set_listener(listener: "EventListener") -> None:
    _UniffiConverterTypeEventListener.check_lower(listener)
    
    _uniffi_rust_call(_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_dummy_set_listener,
        _UniffiConverterTypeEventListener.lower(listener))


def dummy_start(server_address: "str",peer_id: "str",username: "str") -> None:
    _UniffiConverterString.check_lower(server_address)
    
    _UniffiConverterString.check_lower(peer_id)
    
    _UniffiConverterString.check_lower(username)
    
    _uniffi_rust_call(_UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_dummy_start,
        _UniffiConverterString.lower(server_address),
        _UniffiConverterString.lower(peer_id),
        _UniffiConverterString.lower(username))

async def get_reputation(peer_id: "str",topic: "str") -> "float":

    _UniffiConverterString.check_lower(peer_id)
    
    _UniffiConverterString.check_lower(topic)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_get_reputation(
        _UniffiConverterString.lower(peer_id),
        _UniffiConverterString.lower(topic)),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_f32,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_f32,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_f32,
        # lift function
        _UniffiConverterFloat.lift,
        
    # Error FFI converter
_UniffiConverterTypeApiError,

    )
async def get_reputations(topic: "str") -> "typing.List[Reputation]":

    _UniffiConverterString.check_lower(topic)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_get_reputations(
        _UniffiConverterString.lower(topic)),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterSequenceTypeReputation.lift,
        
    # Error FFI converter

    None,

    )
async def get_status_vote(key: "str") -> "typing.Optional[Votation]":

    _UniffiConverterString.check_lower(key)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_get_status_vote(
        _UniffiConverterString.lower(key)),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterOptionalTypeVotation.lift,
        
    # Error FFI converter
_UniffiConverterTypeApiError,

    )
async def register_topic(topic: "str") -> None:

    _UniffiConverterString.check_lower(topic)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_register_topic(
        _UniffiConverterString.lower(topic)),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_void,
        # lift function
        lambda val: None,
        
        
    # Error FFI converter
_UniffiConverterTypeApiError,

    )
async def remote_new_topic(topic: "str") -> None:

    _UniffiConverterString.check_lower(topic)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_remote_new_topic(
        _UniffiConverterString.lower(topic)),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_void,
        # lift function
        lambda val: None,
        
        
    # Error FFI converter
_UniffiConverterTypeApiError,

    )
async def start(server_address: "str",peer_id: "str",username: "str") -> None:

    _UniffiConverterString.check_lower(server_address)
    
    _UniffiConverterString.check_lower(peer_id)
    
    _UniffiConverterString.check_lower(username)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_start(
        _UniffiConverterString.lower(server_address),
        _UniffiConverterString.lower(peer_id),
        _UniffiConverterString.lower(username)),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_void,
        # lift function
        lambda val: None,
        
        
    # Error FFI converter
_UniffiConverterTypeApiError,

    )
async def validate_content(id_votation: "str",topic: "str",content: "str") -> None:

    _UniffiConverterString.check_lower(id_votation)
    
    _UniffiConverterString.check_lower(topic)
    
    _UniffiConverterString.check_lower(content)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_validate_content(
        _UniffiConverterString.lower(id_votation),
        _UniffiConverterString.lower(topic),
        _UniffiConverterString.lower(content)),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_void,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_void,
        # lift function
        lambda val: None,
        
        
    # Error FFI converter
_UniffiConverterTypeApiError,

    )
async def voters(key: "str",topic: "str") -> "typing.List[str]":

    _UniffiConverterString.check_lower(key)
    
    _UniffiConverterString.check_lower(topic)
    
    return await _uniffi_rust_call_async(
        _UniffiLib.uniffi_uniffi_bindings_p2p_fn_func_voters(
        _UniffiConverterString.lower(key),
        _UniffiConverterString.lower(topic)),
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_uniffi_bindings_p2p_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterSequenceString.lift,
        
    # Error FFI converter
_UniffiConverterTypeApiError,

    )

__all__ = [
    "InternalError",
    "ApiError",
    "StateContent",
    "ConnectionData",
    "DataContent",
    "Event",
    "Reputation",
    "Votation",
    "Vote",
    "VoteId",
    "add_vote",
    "all_content",
    "dummy_raw_message",
    "dummy_set_listener",
    "dummy_start",
    "get_reputation",
    "get_reputations",
    "get_status_vote",
    "register_topic",
    "remote_new_topic",
    "start",
    "validate_content",
    "voters",
    "EventListener",
]

