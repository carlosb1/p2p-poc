// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.bindings_p2p

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import kotlin.coroutines.resume
import kotlinx.coroutines.CancellableContinuation
import kotlinx.coroutines.DelicateCoroutinesApi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch
import kotlinx.coroutines.suspendCancellableCoroutine

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_bindings_p2p"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ): UniffiForeignFuture(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructPointer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructPointer.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureStructVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureStructVoid.UniffiByValue,)
}
internal interface UniffiCallbackInterfaceEventListenerMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,)
}
@Structure.FieldOrder("onEvent", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceEventListener(
    @JvmField internal var `onEvent`: UniffiCallbackInterfaceEventListenerMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `onEvent`: UniffiCallbackInterfaceEventListenerMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ): UniffiVTableCallbackInterfaceEventListener(`onEvent`,`uniffiFree`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceEventListener) {
        `onEvent` = other.`onEvent`
        `uniffiFree` = other.`uniffiFree`
    }

}















































































































// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is 
// rather `InterfaceTooLargeException`, caused by too many methods 
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib 
// * IntegrityCheckingUniffiLib (this)
// we allow for ~2x as many methods in the UniffiLib interface.
// 
// The `ffi_uniffi_contract_version` method and all checksum methods are put 
// into `IntegrityCheckingUniffiLib` and these methods are called only once,
// when the library is loaded.
internal interface IntegrityCheckingUniffiLib : Library {
    // Integrity check functions only
    fun uniffi_uniffi_bindings_p2p_checksum_func_add_vote(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_all_content(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_download_connection_data(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_dummy_raw_message(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_dummy_set_listener(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_dummy_start(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_get_my_topics(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_get_reputation(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_get_reputations(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_get_runtime_content_to_validate(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_get_status_vote(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_get_status_voteses(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_new_and_start(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_new_key_available(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_register_topic(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_remote_new_topic(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_start(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_validate_content(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_func_voters(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_method_clientwrapper_get_my_topics(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_method_clientwrapper_new_key_available(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_method_clientwrapper_register_topic(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_method_clientwrapper_remote_new_topic(
): Short
fun uniffi_uniffi_bindings_p2p_checksum_method_eventlistener_on_event(
): Short
fun ffi_uniffi_bindings_p2p_uniffi_contract_version(
): Int

}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.
internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            val componentName = "bindings_p2p"
            // For large crates we prevent `MethodTooLargeException` (see #2340)
            // N.B. the name of the extension is very misleading, since it is 
            // rather `InterfaceTooLargeException`, caused by too many methods 
            // in the interface for large crates.
            //
            // By splitting the otherwise huge interface into two parts
            // * UniffiLib (this)
            // * IntegrityCheckingUniffiLib
            // And all checksum methods are put into `IntegrityCheckingUniffiLib`
            // we allow for ~2x as many methods in the UniffiLib interface.
            // 
            // Thus we first load the library with `loadIndirect` as `IntegrityCheckingUniffiLib`
            // so that we can (optionally!) call `uniffiCheckApiChecksums`...
            loadIndirect<IntegrityCheckingUniffiLib>(componentName)
                .also { lib: IntegrityCheckingUniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
            // ... and then we load the library as `UniffiLib`
            // N.B. we cannot use `loadIndirect` once and then try to cast it to `UniffiLib`
            // => results in `java.lang.ClassCastException: com.sun.proxy.$Proxy cannot be cast to ...`
            // error. So we must call `loadIndirect` twice. For crates large enough
            // to trigger this issue, the performance impact is negligible, running on
            // a macOS M1 machine the `loadIndirect` call takes ~50ms.
            val lib = loadIndirect<UniffiLib>(componentName)
            // No need to check the contract version and checksums, since 
            // we already did that with `IntegrityCheckingUniffiLib` above.
            uniffiCallbackInterfaceEventListener.register(lib)
            // Loading of library with integrity check done.
            lib
        }
        
        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    // FFI functions
    fun uniffi_uniffi_bindings_p2p_fn_clone_clientwrapper(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_uniffi_bindings_p2p_fn_free_clientwrapper(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_uniffi_bindings_p2p_fn_method_clientwrapper_get_my_topics(`ptr`: Pointer,
): Long
fun uniffi_uniffi_bindings_p2p_fn_method_clientwrapper_new_key_available(`ptr`: Pointer,`topic`: RustBuffer.ByValue,`content`: RustBuffer.ByValue,
): Long
fun uniffi_uniffi_bindings_p2p_fn_method_clientwrapper_register_topic(`ptr`: Pointer,`name`: RustBuffer.ByValue,`description`: RustBuffer.ByValue,
): Long
fun uniffi_uniffi_bindings_p2p_fn_method_clientwrapper_remote_new_topic(`ptr`: Pointer,`name`: RustBuffer.ByValue,`description`: RustBuffer.ByValue,
): Long
fun uniffi_uniffi_bindings_p2p_fn_clone_eventlistener(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun uniffi_uniffi_bindings_p2p_fn_free_eventlistener(`ptr`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_uniffi_bindings_p2p_fn_init_callback_vtable_eventlistener(`vtable`: UniffiVTableCallbackInterfaceEventListener,
): Unit
fun uniffi_uniffi_bindings_p2p_fn_method_eventlistener_on_event(`ptr`: Pointer,`event`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_add_vote(`idvotation`: RustBuffer.ByValue,`topic`: RustBuffer.ByValue,`vote`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_uniffi_bindings_p2p_fn_func_all_content(uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_download_connection_data(uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_dummy_raw_message(`topic`: RustBuffer.ByValue,`message`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_uniffi_bindings_p2p_fn_func_dummy_set_listener(`listener`: Pointer,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_uniffi_bindings_p2p_fn_func_dummy_start(`serverAddress`: RustBuffer.ByValue,`peerId`: RustBuffer.ByValue,`username`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_uniffi_bindings_p2p_fn_func_get_my_topics(uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_get_reputation(`peerId`: RustBuffer.ByValue,`topic`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Float
fun uniffi_uniffi_bindings_p2p_fn_func_get_reputations(`topic`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_get_runtime_content_to_validate(uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_get_status_vote(`key`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_get_status_voteses(uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_new_and_start(`serverAddress`: RustBuffer.ByValue,`peerId`: RustBuffer.ByValue,`username`: RustBuffer.ByValue,
): Long
fun uniffi_uniffi_bindings_p2p_fn_func_new_key_available(`topic`: RustBuffer.ByValue,`content`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_register_topic(`name`: RustBuffer.ByValue,`description`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_uniffi_bindings_p2p_fn_func_remote_new_topic(`name`: RustBuffer.ByValue,`description`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun uniffi_uniffi_bindings_p2p_fn_func_start(`serverAddress`: RustBuffer.ByValue,`peerId`: RustBuffer.ByValue,`username`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_validate_content(`topic`: RustBuffer.ByValue,`content`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun uniffi_uniffi_bindings_p2p_fn_func_voters(`key`: RustBuffer.ByValue,`topic`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_uniffi_bindings_p2p_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_uniffi_bindings_p2p_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_uniffi_bindings_p2p_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
fun ffi_uniffi_bindings_p2p_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_uniffi_bindings_p2p_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_u8(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_u8(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_uniffi_bindings_p2p_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_i8(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_i8(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
fun ffi_uniffi_bindings_p2p_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_u16(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_u16(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_uniffi_bindings_p2p_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_i16(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_i16(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
fun ffi_uniffi_bindings_p2p_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_u32(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_u32(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_uniffi_bindings_p2p_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_i32(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_i32(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
fun ffi_uniffi_bindings_p2p_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_u64(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_u64(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_uniffi_bindings_p2p_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_i64(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_i64(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
fun ffi_uniffi_bindings_p2p_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_f32(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_f32(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Float
fun ffi_uniffi_bindings_p2p_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_f64(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_f64(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Double
fun ffi_uniffi_bindings_p2p_rust_future_poll_pointer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_pointer(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_pointer(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_pointer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Pointer
fun ffi_uniffi_bindings_p2p_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_rust_buffer(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_rust_buffer(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
fun ffi_uniffi_bindings_p2p_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_cancel_void(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_free_void(`handle`: Long,
): Unit
fun ffi_uniffi_bindings_p2p_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit

}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_uniffi_bindings_p2p_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_add_vote() != 37088.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_all_content() != 35134.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_download_connection_data() != 22897.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_raw_message() != 43565.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_set_listener() != 41029.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_dummy_start() != 19920.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_get_my_topics() != 25688.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_get_reputation() != 12763.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_get_reputations() != 32448.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_get_runtime_content_to_validate() != 23865.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_get_status_vote() != 56723.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_get_status_voteses() != 39847.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_new_and_start() != 6582.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_new_key_available() != 57342.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_register_topic() != 19518.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_remote_new_topic() != 22201.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_start() != 10775.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_validate_content() != 57356.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_func_voters() != 4926.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_method_clientwrapper_get_my_topics() != 35384.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_method_clientwrapper_new_key_available() != 19391.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_method_clientwrapper_register_topic() != 60972.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_method_clientwrapper_remote_new_topic() != 17828.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_uniffi_bindings_p2p_checksum_method_eventlistener_on_event() != 40838.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    UniffiLib.INSTANCE
}

// Async support
// Async return type handlers

internal const val UNIFFI_RUST_FUTURE_POLL_READY = 0.toByte()
internal const val UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1.toByte()

internal val uniffiContinuationHandleMap = UniffiHandleMap<CancellableContinuation<Byte>>()

// FFI type for Rust future continuations
internal object uniffiRustFutureContinuationCallbackImpl: UniffiRustFutureContinuationCallback {
    override fun callback(data: Long, pollResult: Byte) {
        uniffiContinuationHandleMap.remove(data).resume(pollResult)
    }
}

internal suspend fun<T, F, E: kotlin.Exception> uniffiRustCallAsync(
    rustFuture: Long,
    pollFunc: (Long, UniffiRustFutureContinuationCallback, Long) -> Unit,
    completeFunc: (Long, UniffiRustCallStatus) -> F,
    freeFunc: (Long) -> Unit,
    liftFunc: (F) -> T,
    errorHandler: UniffiRustCallStatusErrorHandler<E>
): T {
    try {
        do {
            val pollResult = suspendCancellableCoroutine<Byte> { continuation ->
                pollFunc(
                    rustFuture,
                    uniffiRustFutureContinuationCallbackImpl,
                    uniffiContinuationHandleMap.insert(continuation)
                )
            }
        } while (pollResult != UNIFFI_RUST_FUTURE_POLL_READY);

        return liftFunc(
            uniffiRustCallWithError(errorHandler, { status -> completeFunc(rustFuture, status) })
        )
    } finally {
        freeFunc(rustFuture)
    }
}

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            for (arg in args) {
                when (arg) {
                    is Disposable -> arg.destroy()
                    is ArrayList<*> -> {
                        for (idx in arg.indices) {
                            val element = arg[idx]
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Map<*, *> -> {
                        for (element in arg.values) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Iterable<*> -> {
                        for (element in arg) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

/**
 * @suppress
 */
public abstract class FfiConverterCallbackInterface<CallbackInterface: Any>: FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}
/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}


// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

/**
 * @suppress
 */
public object FfiConverterFloat: FfiConverter<Float, Float> {
    override fun lift(value: Float): Float {
        return value
    }

    override fun read(buf: ByteBuffer): Float {
        return buf.getFloat()
    }

    override fun lower(value: Float): Float {
        return value
    }

    override fun allocationSize(value: Float) = 4UL

    override fun write(value: Float, buf: ByteBuffer) {
        buf.putFloat(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}


/**
 * @suppress
 */
public object FfiConverterTimestamp: FfiConverterRustBuffer<java.time.Instant> {
    override fun read(buf: ByteBuffer): java.time.Instant {
        val seconds = buf.getLong()
        // Type mismatch (should be u32) but we check for overflow/underflow below
        val nanoseconds = buf.getInt().toLong()
        if (nanoseconds < 0) {
            throw java.time.DateTimeException("Instant nanoseconds exceed minimum or maximum supported by uniffi")
        }
        if (seconds >= 0) {
            return java.time.Instant.EPOCH.plus(java.time.Duration.ofSeconds(seconds, nanoseconds))
        } else {
            return java.time.Instant.EPOCH.minus(java.time.Duration.ofSeconds(-seconds, nanoseconds))
        }
    }

    // 8 bytes for seconds, 4 bytes for nanoseconds
    override fun allocationSize(value: java.time.Instant) = 12UL

    override fun write(value: java.time.Instant, buf: ByteBuffer) {
        var epochOffset = java.time.Duration.between(java.time.Instant.EPOCH, value)

        var sign = 1
        if (epochOffset.isNegative()) {
            sign = -1
            epochOffset = epochOffset.negated()
        }

        if (epochOffset.nano < 0) {
            // Java docs provide guarantee that nano will always be positive, so this should be impossible
            // See: https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html
            throw IllegalArgumentException("Invalid timestamp, nano value must be non-negative")
        }

        buf.putLong(sign * epochOffset.seconds)
        // Type mismatch (should be u32) but since values will always be between 0 and 999,999,999 it should be OK
        buf.putInt(epochOffset.nano)
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface ClientWrapperInterface {
    
    suspend fun `getMyTopics`(): List<Topic>
    
    suspend fun `newKeyAvailable`(`topic`: kotlin.String, `content`: kotlin.String): kotlin.String
    
    suspend fun `registerTopic`(`name`: kotlin.String, `description`: kotlin.String)
    
    suspend fun `remoteNewTopic`(`name`: kotlin.String, `description`: kotlin.String)
    
    companion object
}

open class ClientWrapper: Disposable, AutoCloseable, ClientWrapperInterface
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_free_clientwrapper(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_clone_clientwrapper(pointer!!, status)
        }
    }

    
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `getMyTopics`() : List<Topic> {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_method_clientwrapper_get_my_topics(
                thisPtr,
                
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterSequenceTypeTopic.lift(it) },
        // Error FFI converter
        UniffiNullRustCallStatusErrorHandler,
    )
    }

    
    @Throws(ApiException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `newKeyAvailable`(`topic`: kotlin.String, `content`: kotlin.String) : kotlin.String {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_method_clientwrapper_new_key_available(
                thisPtr,
                FfiConverterString.lower(`topic`),FfiConverterString.lower(`content`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_poll_rust_buffer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_complete_rust_buffer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_free_rust_buffer(future) },
        // lift function
        { FfiConverterString.lift(it) },
        // Error FFI converter
        ApiException.ErrorHandler,
    )
    }

    
    @Throws(ApiException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `registerTopic`(`name`: kotlin.String, `description`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_method_clientwrapper_register_topic(
                thisPtr,
                FfiConverterString.lower(`name`),FfiConverterString.lower(`description`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ApiException.ErrorHandler,
    )
    }

    
    @Throws(ApiException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
    override suspend fun `remoteNewTopic`(`name`: kotlin.String, `description`: kotlin.String) {
        return uniffiRustCallAsync(
        callWithPointer { thisPtr ->
            UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_method_clientwrapper_remote_new_topic(
                thisPtr,
                FfiConverterString.lower(`name`),FfiConverterString.lower(`description`),
            )
        },
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_poll_void(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_complete_void(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_free_void(future) },
        // lift function
        { Unit },
        
        // Error FFI converter
        ApiException.ErrorHandler,
    )
    }

    

    
    
    companion object
    
}

/**
 * @suppress
 */
public object FfiConverterTypeClientWrapper: FfiConverter<ClientWrapper, Pointer> {

    override fun lower(value: ClientWrapper): Pointer {
        return value.uniffiClonePointer()
    }

    override fun lift(value: Pointer): ClientWrapper {
        return ClientWrapper(value)
    }

    override fun read(buf: ByteBuffer): ClientWrapper {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: ClientWrapper) = 8UL

    override fun write(value: ClientWrapper, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}


// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


public interface EventListener {
    
    fun `onEvent`(`event`: Event): kotlin.String
    
    companion object
}

open class EventListenerImpl: Disposable, AutoCloseable, EventListener
{

    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val pointer: Pointer?) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_free_eventlistener(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer {
        return uniffiRustCall() { status ->
            UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_clone_eventlistener(pointer!!, status)
        }
    }

    override fun `onEvent`(`event`: Event): kotlin.String {
            return FfiConverterString.lift(
    callWithPointer {
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_method_eventlistener_on_event(
        it, FfiConverterTypeEvent.lower(`event`),_status)
}
    }
    )
    }
    

    

    
    
    companion object
    
}


// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceEventListener {
    internal object `onEvent`: UniffiCallbackInterfaceEventListenerMethod0 {
        override fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: RustBuffer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEventListener.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onEvent`(
                    FfiConverterTypeEvent.lift(`event`),
                )
            }
            val writeReturn = { value: kotlin.String -> uniffiOutReturn.setValue(FfiConverterString.lower(value)) }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeEventListener.handleMap.remove(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceEventListener.UniffiByValue(
        `onEvent`,
        uniffiFree,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_uniffi_bindings_p2p_fn_init_callback_vtable_eventlistener(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeEventListener: FfiConverter<EventListener, Pointer> {
    internal val handleMap = UniffiHandleMap<EventListener>()

    override fun lower(value: EventListener): Pointer {
        return Pointer(handleMap.insert(value))
    }

    override fun lift(value: Pointer): EventListener {
        return EventListenerImpl(value)
    }

    override fun read(buf: ByteBuffer): EventListener {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: EventListener) = 8UL

    override fun write(value: EventListener, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}



data class ConnectionData (
    var `serverId`: kotlin.String, 
    var `serverAddress`: List<kotlin.String>, 
    var `clientId`: kotlin.String?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeConnectionData: FfiConverterRustBuffer<ConnectionData> {
    override fun read(buf: ByteBuffer): ConnectionData {
        return ConnectionData(
            FfiConverterString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: ConnectionData) = (
            FfiConverterString.allocationSize(value.`serverId`) +
            FfiConverterSequenceString.allocationSize(value.`serverAddress`) +
            FfiConverterOptionalString.allocationSize(value.`clientId`)
    )

    override fun write(value: ConnectionData, buf: ByteBuffer) {
            FfiConverterString.write(value.`serverId`, buf)
            FfiConverterSequenceString.write(value.`serverAddress`, buf)
            FfiConverterOptionalString.write(value.`clientId`, buf)
    }
}



data class DataContent (
    var `idVotation`: kotlin.String, 
    var `content`: kotlin.String, 
    var `approved`: StateContent
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeDataContent: FfiConverterRustBuffer<DataContent> {
    override fun read(buf: ByteBuffer): DataContent {
        return DataContent(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeStateContent.read(buf),
        )
    }

    override fun allocationSize(value: DataContent) = (
            FfiConverterString.allocationSize(value.`idVotation`) +
            FfiConverterString.allocationSize(value.`content`) +
            FfiConverterTypeStateContent.allocationSize(value.`approved`)
    )

    override fun write(value: DataContent, buf: ByteBuffer) {
            FfiConverterString.write(value.`idVotation`, buf)
            FfiConverterString.write(value.`content`, buf)
            FfiConverterTypeStateContent.write(value.`approved`, buf)
    }
}



data class Event (
    var `topic`: kotlin.String, 
    var `message`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEvent: FfiConverterRustBuffer<Event> {
    override fun read(buf: ByteBuffer): Event {
        return Event(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Event) = (
            FfiConverterString.allocationSize(value.`topic`) +
            FfiConverterString.allocationSize(value.`message`)
    )

    override fun write(value: Event, buf: ByteBuffer) {
            FfiConverterString.write(value.`topic`, buf)
            FfiConverterString.write(value.`message`, buf)
    }
}



data class Pair (
    var `key`: kotlin.String, 
    var `value`: kotlin.Float
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePair: FfiConverterRustBuffer<Pair> {
    override fun read(buf: ByteBuffer): Pair {
        return Pair(
            FfiConverterString.read(buf),
            FfiConverterFloat.read(buf),
        )
    }

    override fun allocationSize(value: Pair) = (
            FfiConverterString.allocationSize(value.`key`) +
            FfiConverterFloat.allocationSize(value.`value`)
    )

    override fun write(value: Pair, buf: ByteBuffer) {
            FfiConverterString.write(value.`key`, buf)
            FfiConverterFloat.write(value.`value`, buf)
    }
}



data class Reputation (
    var `name`: kotlin.String, 
    var `repu`: kotlin.Float
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeReputation: FfiConverterRustBuffer<Reputation> {
    override fun read(buf: ByteBuffer): Reputation {
        return Reputation(
            FfiConverterString.read(buf),
            FfiConverterFloat.read(buf),
        )
    }

    override fun allocationSize(value: Reputation) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterFloat.allocationSize(value.`repu`)
    )

    override fun write(value: Reputation, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterFloat.write(value.`repu`, buf)
    }
}



data class RuntimePendingContent (
    var `key`: kotlin.String, 
    var `topic`: kotlin.String, 
    var `content`: kotlin.String, 
    var `waitTimeout`: java.time.Instant
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeRuntimePendingContent: FfiConverterRustBuffer<RuntimePendingContent> {
    override fun read(buf: ByteBuffer): RuntimePendingContent {
        return RuntimePendingContent(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTimestamp.read(buf),
        )
    }

    override fun allocationSize(value: RuntimePendingContent) = (
            FfiConverterString.allocationSize(value.`key`) +
            FfiConverterString.allocationSize(value.`topic`) +
            FfiConverterString.allocationSize(value.`content`) +
            FfiConverterTimestamp.allocationSize(value.`waitTimeout`)
    )

    override fun write(value: RuntimePendingContent, buf: ByteBuffer) {
            FfiConverterString.write(value.`key`, buf)
            FfiConverterString.write(value.`topic`, buf)
            FfiConverterString.write(value.`content`, buf)
            FfiConverterTimestamp.write(value.`waitTimeout`, buf)
    }
}



data class Topic (
    var `name`: kotlin.String, 
    var `description`: kotlin.String
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTopic: FfiConverterRustBuffer<Topic> {
    override fun read(buf: ByteBuffer): Topic {
        return Topic(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Topic) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`description`)
    )

    override fun write(value: Topic, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`description`, buf)
    }
}



data class Votation (
    var `idVotation`: kotlin.String, 
    var `timestam`: java.time.Instant, 
    var `content`: kotlin.String, 
    var `status`: kotlin.String, 
    var `leaderId`: kotlin.String, 
    var `myRole`: kotlin.String, 
    var `votesId`: List<VoteId>
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeVotation: FfiConverterRustBuffer<Votation> {
    override fun read(buf: ByteBuffer): Votation {
        return Votation(
            FfiConverterString.read(buf),
            FfiConverterTimestamp.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeVoteId.read(buf),
        )
    }

    override fun allocationSize(value: Votation) = (
            FfiConverterString.allocationSize(value.`idVotation`) +
            FfiConverterTimestamp.allocationSize(value.`timestam`) +
            FfiConverterString.allocationSize(value.`content`) +
            FfiConverterString.allocationSize(value.`status`) +
            FfiConverterString.allocationSize(value.`leaderId`) +
            FfiConverterString.allocationSize(value.`myRole`) +
            FfiConverterSequenceTypeVoteId.allocationSize(value.`votesId`)
    )

    override fun write(value: Votation, buf: ByteBuffer) {
            FfiConverterString.write(value.`idVotation`, buf)
            FfiConverterTimestamp.write(value.`timestam`, buf)
            FfiConverterString.write(value.`content`, buf)
            FfiConverterString.write(value.`status`, buf)
            FfiConverterString.write(value.`leaderId`, buf)
            FfiConverterString.write(value.`myRole`, buf)
            FfiConverterSequenceTypeVoteId.write(value.`votesId`, buf)
    }
}



data class Vote (
    var `good`: kotlin.Boolean
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeVote: FfiConverterRustBuffer<Vote> {
    override fun read(buf: ByteBuffer): Vote {
        return Vote(
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Vote) = (
            FfiConverterBoolean.allocationSize(value.`good`)
    )

    override fun write(value: Vote, buf: ByteBuffer) {
            FfiConverterBoolean.write(value.`good`, buf)
    }
}



data class VoteId (
    var `key`: kotlin.String, 
    var `value`: kotlin.Float
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeVoteId: FfiConverterRustBuffer<VoteId> {
    override fun read(buf: ByteBuffer): VoteId {
        return VoteId(
            FfiConverterString.read(buf),
            FfiConverterFloat.read(buf),
        )
    }

    override fun allocationSize(value: VoteId) = (
            FfiConverterString.allocationSize(value.`key`) +
            FfiConverterFloat.allocationSize(value.`value`)
    )

    override fun write(value: VoteId, buf: ByteBuffer) {
            FfiConverterString.write(value.`key`, buf)
            FfiConverterFloat.write(value.`value`, buf)
    }
}



data class VoteStatus (
    var `kind`: VoteStatusKind, 
    var `pendingData`: List<Pair>?
) {
    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeVoteStatus: FfiConverterRustBuffer<VoteStatus> {
    override fun read(buf: ByteBuffer): VoteStatus {
        return VoteStatus(
            FfiConverterTypeVoteStatusKind.read(buf),
            FfiConverterOptionalSequenceTypePair.read(buf),
        )
    }

    override fun allocationSize(value: VoteStatus) = (
            FfiConverterTypeVoteStatusKind.allocationSize(value.`kind`) +
            FfiConverterOptionalSequenceTypePair.allocationSize(value.`pendingData`)
    )

    override fun write(value: VoteStatus, buf: ByteBuffer) {
            FfiConverterTypeVoteStatusKind.write(value.`kind`, buf)
            FfiConverterOptionalSequenceTypePair.write(value.`pendingData`, buf)
    }
}





sealed class ApiException(message: String): kotlin.Exception(message) {
        
        class ConnectionException(message: String) : ApiException(message)
        
        class ConcurrencyException(message: String) : ApiException(message)
        
        class RuntimeException(message: String) : ApiException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<ApiException> {
        override fun lift(error_buf: RustBuffer.ByValue): ApiException = FfiConverterTypeAPIError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeAPIError : FfiConverterRustBuffer<ApiException> {
    override fun read(buf: ByteBuffer): ApiException {
        
            return when(buf.getInt()) {
            1 -> ApiException.ConnectionException(FfiConverterString.read(buf))
            2 -> ApiException.ConcurrencyException(FfiConverterString.read(buf))
            3 -> ApiException.RuntimeException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: ApiException): ULong {
        return 4UL
    }

    override fun write(value: ApiException, buf: ByteBuffer) {
        when(value) {
            is ApiException.ConnectionException -> {
                buf.putInt(1)
                Unit
            }
            is ApiException.ConcurrencyException -> {
                buf.putInt(2)
                Unit
            }
            is ApiException.RuntimeException -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class StateContent {
    
    APPROVED,
    REJECTED;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeStateContent: FfiConverterRustBuffer<StateContent> {
    override fun read(buf: ByteBuffer) = try {
        StateContent.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: StateContent) = 4UL

    override fun write(value: StateContent, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class VoteStatusKind {
    
    PENDING,
    ACCEPTED,
    REJECTED;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeVoteStatusKind: FfiConverterRustBuffer<VoteStatusKind> {
    override fun read(buf: ByteBuffer) = try {
        VoteStatusKind.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: VoteStatusKind) = 4UL

    override fun write(value: VoteStatusKind, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeVotation: FfiConverterRustBuffer<Votation?> {
    override fun read(buf: ByteBuffer): Votation? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeVotation.read(buf)
    }

    override fun allocationSize(value: Votation?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeVotation.allocationSize(value)
        }
    }

    override fun write(value: Votation?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeVotation.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalSequenceTypePair: FfiConverterRustBuffer<List<Pair>?> {
    override fun read(buf: ByteBuffer): List<Pair>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceTypePair.read(buf)
    }

    override fun allocationSize(value: List<Pair>?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterSequenceTypePair.allocationSize(value)
        }
    }

    override fun write(value: List<Pair>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceTypePair.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeDataContent: FfiConverterRustBuffer<List<DataContent>> {
    override fun read(buf: ByteBuffer): List<DataContent> {
        val len = buf.getInt()
        return List<DataContent>(len) {
            FfiConverterTypeDataContent.read(buf)
        }
    }

    override fun allocationSize(value: List<DataContent>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeDataContent.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<DataContent>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeDataContent.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypePair: FfiConverterRustBuffer<List<Pair>> {
    override fun read(buf: ByteBuffer): List<Pair> {
        val len = buf.getInt()
        return List<Pair>(len) {
            FfiConverterTypePair.read(buf)
        }
    }

    override fun allocationSize(value: List<Pair>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePair.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Pair>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePair.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeReputation: FfiConverterRustBuffer<List<Reputation>> {
    override fun read(buf: ByteBuffer): List<Reputation> {
        val len = buf.getInt()
        return List<Reputation>(len) {
            FfiConverterTypeReputation.read(buf)
        }
    }

    override fun allocationSize(value: List<Reputation>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeReputation.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Reputation>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeReputation.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeRuntimePendingContent: FfiConverterRustBuffer<List<RuntimePendingContent>> {
    override fun read(buf: ByteBuffer): List<RuntimePendingContent> {
        val len = buf.getInt()
        return List<RuntimePendingContent>(len) {
            FfiConverterTypeRuntimePendingContent.read(buf)
        }
    }

    override fun allocationSize(value: List<RuntimePendingContent>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeRuntimePendingContent.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<RuntimePendingContent>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeRuntimePendingContent.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTopic: FfiConverterRustBuffer<List<Topic>> {
    override fun read(buf: ByteBuffer): List<Topic> {
        val len = buf.getInt()
        return List<Topic>(len) {
            FfiConverterTypeTopic.read(buf)
        }
    }

    override fun allocationSize(value: List<Topic>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTopic.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Topic>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTopic.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeVotation: FfiConverterRustBuffer<List<Votation>> {
    override fun read(buf: ByteBuffer): List<Votation> {
        val len = buf.getInt()
        return List<Votation>(len) {
            FfiConverterTypeVotation.read(buf)
        }
    }

    override fun allocationSize(value: List<Votation>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeVotation.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Votation>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeVotation.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeVoteId: FfiConverterRustBuffer<List<VoteId>> {
    override fun read(buf: ByteBuffer): List<VoteId> {
        val len = buf.getInt()
        return List<VoteId>(len) {
            FfiConverterTypeVoteId.read(buf)
        }
    }

    override fun allocationSize(value: List<VoteId>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeVoteId.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<VoteId>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeVoteId.write(it, buf)
        }
    }
}








    @Throws(ApiException::class) fun `addVote`(`idvotation`: kotlin.String, `topic`: kotlin.String, `vote`: Vote)
        = 
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_add_vote(
        FfiConverterString.lower(`idvotation`),FfiConverterString.lower(`topic`),FfiConverterTypeVote.lower(`vote`),_status)
}
    
    

    @Throws(ApiException::class) fun `allContent`(): List<DataContent> {
            return FfiConverterSequenceTypeDataContent.lift(
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_all_content(
        _status)
}
    )
    }
    
 fun `downloadConnectionData`(): ConnectionData {
            return FfiConverterTypeConnectionData.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_download_connection_data(
        _status)
}
    )
    }
    
 fun `dummyRawMessage`(`topic`: kotlin.String, `message`: kotlin.String)
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_dummy_raw_message(
        FfiConverterString.lower(`topic`),FfiConverterString.lower(`message`),_status)
}
    
    
 fun `dummySetListener`(`listener`: EventListener)
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_dummy_set_listener(
        FfiConverterTypeEventListener.lower(`listener`),_status)
}
    
    
 fun `dummyStart`(`serverAddress`: kotlin.String, `peerId`: kotlin.String, `username`: kotlin.String)
        = 
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_dummy_start(
        FfiConverterString.lower(`serverAddress`),FfiConverterString.lower(`peerId`),FfiConverterString.lower(`username`),_status)
}
    
    
 fun `getMyTopics`(): List<Topic> {
            return FfiConverterSequenceTypeTopic.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_get_my_topics(
        _status)
}
    )
    }
    

    @Throws(ApiException::class) fun `getReputation`(`peerId`: kotlin.String, `topic`: kotlin.String): kotlin.Float {
            return FfiConverterFloat.lift(
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_get_reputation(
        FfiConverterString.lower(`peerId`),FfiConverterString.lower(`topic`),_status)
}
    )
    }
    
 fun `getReputations`(`topic`: kotlin.String): List<Reputation> {
            return FfiConverterSequenceTypeReputation.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_get_reputations(
        FfiConverterString.lower(`topic`),_status)
}
    )
    }
    
 fun `getRuntimeContentToValidate`(): List<RuntimePendingContent> {
            return FfiConverterSequenceTypeRuntimePendingContent.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_get_runtime_content_to_validate(
        _status)
}
    )
    }
    

    @Throws(ApiException::class) fun `getStatusVote`(`key`: kotlin.String): Votation? {
            return FfiConverterOptionalTypeVotation.lift(
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_get_status_vote(
        FfiConverterString.lower(`key`),_status)
}
    )
    }
    
 fun `getStatusVoteses`(): List<Votation> {
            return FfiConverterSequenceTypeVotation.lift(
    uniffiRustCall() { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_get_status_voteses(
        _status)
}
    )
    }
    

    @Throws(ApiException::class)
    @Suppress("ASSIGNED_BUT_NEVER_ACCESSED_VARIABLE")
     suspend fun `newAndStart`(`serverAddress`: kotlin.String, `peerId`: kotlin.String, `username`: kotlin.String) : ClientWrapper {
        return uniffiRustCallAsync(
        UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_new_and_start(FfiConverterString.lower(`serverAddress`),FfiConverterString.lower(`peerId`),FfiConverterString.lower(`username`),),
        { future, callback, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_poll_pointer(future, callback, continuation) },
        { future, continuation -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_complete_pointer(future, continuation) },
        { future -> UniffiLib.INSTANCE.ffi_uniffi_bindings_p2p_rust_future_free_pointer(future) },
        // lift function
        { FfiConverterTypeClientWrapper.lift(it) },
        // Error FFI converter
        ApiException.ErrorHandler,
    )
    }

    @Throws(ApiException::class) fun `newKeyAvailable`(`topic`: kotlin.String, `content`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_new_key_available(
        FfiConverterString.lower(`topic`),FfiConverterString.lower(`content`),_status)
}
    )
    }
    

    @Throws(ApiException::class) fun `registerTopic`(`name`: kotlin.String, `description`: kotlin.String)
        = 
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_register_topic(
        FfiConverterString.lower(`name`),FfiConverterString.lower(`description`),_status)
}
    
    

    @Throws(ApiException::class) fun `remoteNewTopic`(`name`: kotlin.String, `description`: kotlin.String)
        = 
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_remote_new_topic(
        FfiConverterString.lower(`name`),FfiConverterString.lower(`description`),_status)
}
    
    

    @Throws(ApiException::class) fun `start`(`serverAddress`: kotlin.String, `peerId`: kotlin.String, `username`: kotlin.String): ConnectionData {
            return FfiConverterTypeConnectionData.lift(
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_start(
        FfiConverterString.lower(`serverAddress`),FfiConverterString.lower(`peerId`),FfiConverterString.lower(`username`),_status)
}
    )
    }
    

    @Throws(ApiException::class) fun `validateContent`(`topic`: kotlin.String, `content`: kotlin.String): kotlin.String {
            return FfiConverterString.lift(
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_validate_content(
        FfiConverterString.lower(`topic`),FfiConverterString.lower(`content`),_status)
}
    )
    }
    

    @Throws(ApiException::class) fun `voters`(`key`: kotlin.String, `topic`: kotlin.String): List<kotlin.String> {
            return FfiConverterSequenceString.lift(
    uniffiRustCallWithError(ApiException) { _status ->
    UniffiLib.INSTANCE.uniffi_uniffi_bindings_p2p_fn_func_voters(
        FfiConverterString.lower(`key`),FfiConverterString.lower(`topic`),_status)
}
    )
    }
    


