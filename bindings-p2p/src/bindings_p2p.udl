[Error]
enum APIError {
    "ConnectionError","ConcurrencyError", "RuntimeError"
};

namespace bindings_p2p {
void dummy_start(string server_address, string peer_id, string username);
void dummy_set_listener(EventListener listener);
void dummy_raw_message(string topic, string message);
    [Throws=APIError]
    ConnectionData start(string server_address, string peer_id, string username);
    [Throws=APIError]
    void add_vote(string idvotation, string topic, Vote vote);
    [Throws=APIError]
    string validate_content(string topic, string content);
    [Throws=APIError]
    void remote_new_topic(string name, string description);
    [Throws=APIError]
    void register_topic(string name, string description);
sequence<Topic> get_my_topics();
    [Throws=APIError]
    string new_key_available(string topic, string content);

    [Throws=APIError]
    sequence<DataContent> all_content();
    [Throws=APIError]
    Votation? get_status_vote(string key);
    [Throws=APIError]
    sequence<string> voters(string key, string topic);
    [Throws=APIError]
    float get_reputation(string peer_id, string topic);

sequence<Reputation> get_reputations(string topic);

sequence<Votation> get_status_voteses();

sequence<RuntimePendingContent> get_runtime_content_to_validate();
ConnectionData download_connection_data();
};

dictionary ConnectionData {
    string server_id;
    sequence<string> server_address;
    string? client_id;
};

dictionary RuntimePendingContent {
    string key;
    string topic;
    string content;
    timestamp wait_timeout;
};

dictionary Topic {
    string name;
    string description;
};

enum VoteStatusKind {
    "Pending",
    "Accepted",
    "Rejected",
};


dictionary Pair {
    string key;
    float value;
};

dictionary VoteStatus {
    VoteStatusKind kind;
    sequence<Pair>? pending_data;
};


dictionary Reputation {
    string name;
    float repu;
};

dictionary Event {
    string topic;
    string message;
};

dictionary Vote {
    boolean good;
};

dictionary VoteId {
    string key;
    float value;
};

dictionary Votation {
    string id_votation;
    timestamp timestam;
    string content;
    string status;
    string leader_id;
    string my_role;
    sequence<VoteId> votes_id;
};
enum StateContent {
    "Approved",
    "Rejected",
};

dictionary DataContent {
    string id_votation;
    string content;
    StateContent approved;
};


[Trait, WithForeign]
interface EventListener {
string on_event(Event event);
};
